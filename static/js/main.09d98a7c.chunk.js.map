{"version":3,"sources":["pages/setup/setup.module.css","components/field/field.module.css","components/navigation/navigation.module.css","pages/result/result.module.css","pages/main/main.module.css","reportWebVitals.ts","utils.ts","components/field/field.tsx","constants.ts","components/navigation/navigation.tsx","pages/game/game.tsx","hooks.ts","pages/setup/constants.ts","pages/result/result.tsx","pages/setup/setup.tsx","pages/main/main.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ensureDefined","value","undefined","Error","isItemInArray","array","itemX","itemY","some","x","y","isOutOfRange","coord","fieldSize","createTarget","snake","size","xCoordCounter","getCounter","yCoordCounter","forEach","sortedX","sortCounter","sortedY","possibleX","filter","possibleY","minXCoord","getRandomIndex","length","minYCoord","Number","collection","Set","point","xCoord","yCoord","add","getValue","availableValues","Array","from","_","i","has","Math","floor","random","counter","Object","entries","sort","counterA","counterB","reduce","acc","next","Field","props","target","rows","cells","j","isSnake","isTarget","className","classNames","s","cell","push","field","KeyCodes","offset","Left","Up","Right","Down","Navigation","step","navigation","onClick","Game","timer","setSnake","useState","setTarget","direction","setDirection","useCallback","stepX","stepY","targetX","targetY","headX","headY","nextSnake","nextHeadX","nextHeadY","hasTarget","shift","options","useEffect","handleKeydown","event","keyCode","window","addEventListener","removeEventListener","useKeyboard","current","clearInterval","setInterval","cellsCount","interval","getStepInterval","SizeList","Result","result","sizeList","ExtraSmall","Small","Medium","Large","ExtraLarge","cellCount","Setup","setSize","onStart","selectedIndex","useMemo","findIndex","item","table","style","row","isSelected","cellClassNames","cell_selected","container","onSubmit","map","title","getTitle","Fragment","id","radio","type","name","onChange","handleChange","checked","label","htmlFor","submit","defaultValue","GameState","Main","useRef","Init","state","setState","snakeCopy","pop","hasWon","End","app","start","Start","render","center","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09d98a7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"setup_container__1fB0P\",\"size\":\"setup_size__b1xR5\",\"radio\":\"setup_radio__cKofK\",\"label\":\"setup_label__2J7Jb\",\"table\":\"setup_table__1AURJ\",\"cell\":\"setup_cell__xt6gJ\",\"cell_selected\":\"setup_cell_selected__3UCgu\",\"submit\":\"setup_submit__AF8hv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"field_field__2R9AU\",\"cell\":\"field_cell__1deHi\",\"snake\":\"field_snake__dFqKB\",\"target\":\"field_target__1UPnj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"navigation_navigation__unRcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"result_result__x6heC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"main_app__3CLA4\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import { Point } from './interfaces';\n\nexport function ensureDefined<T>(value: T | undefined): T {\n\tif (value === undefined) {\n\t\tthrow new Error('Value is undefined');\n\t}\n\n\treturn value;\n}\n\nexport function isItemInArray(array: Point[], [itemX, itemY]: Point): boolean {\n\treturn array.some(([x, y]) => x === itemX && y === itemY);\n}\n\nexport function isOutOfRange(coord: number, fieldSize: number): boolean {\n\treturn coord < 0 || coord >= fieldSize;\n}\n\nexport function createTarget(snake: Point[], size: number): Point {\n\tconst xCoordCounter = getCounter(size);\n\tconst yCoordCounter = getCounter(size);\n\n\tsnake.forEach(([x, y]: Point) => {\n\t\txCoordCounter[x] += 1;\n\t\tyCoordCounter[y] += 1;\n\t});\n\tconst sortedX = sortCounter(xCoordCounter);\n\tconst sortedY = sortCounter(yCoordCounter);\n\tconst possibleX = sortedX.filter(([, value]) => value === sortedX[0][1]);\n\tconst possibleY = sortedY.filter(([, value]) => value === sortedY[0][1]);\n\tconst [minXCoord] = possibleX[getRandomIndex(possibleX.length)];\n\tconst [minYCoord] = possibleY[getRandomIndex(possibleY.length)];\n\tconst x = Number(minXCoord);\n\tconst y = Number(minYCoord);\n\n\tif (x < y) {\n\t\tconst collection = new Set<number>();\n\t\tsnake.forEach((point: Point) => {\n\t\t\tconst [xCoord, yCoord] = point;\n\t\t\tif (xCoord === x) {\n\t\t\t\tcollection.add(yCoord);\n\t\t\t}\n\t\t});\n\t\treturn [x, getValue(collection, size)];\n\t}\n\n\tconst collection = new Set<number>();\n\tsnake.forEach((point: Point) => {\n\t\tconst [xCoord, yCoord] = point;\n\t\tif (yCoord === y) {\n\t\t\tcollection.add(xCoord);\n\t\t}\n\t});\n\treturn [getValue(collection, size), y];\n}\n\nfunction getValue(collection: Set<number>, length: number): number {\n\tconst availableValues = Array\n\t\t.from({ length }, (_, i: number) => i)\n\t\t.filter((i: number) => !collection.has(i));\n\n\treturn availableValues[getRandomIndex(availableValues.length)];\n}\n\nfunction getRandomIndex(length: number): number {\n\treturn Math.floor(Math.random() * length);\n}\n\nexport function sortCounter(counter: Counter): [string, number][] {\n\treturn Object.entries(counter).sort(\n\t\t(counterA: [string, number], counterB: [string, number]) => {\n\t\t\tconst [, valueA] = counterA;\n\t\t\tconst [, valueB] = counterB;\n\t\t\treturn valueA - valueB;\n\t\t}\n\t);\n}\n\ntype Counter = Record<string, number>;\n\nexport function getCounter(length: number): Counter {\n\treturn Array\n\t\t.from({ length }, (_, i: number) => i)\n\t\t.reduce(\n\t\t\t(acc: Counter, next: number) => {\n\t\t\t\tacc[next] = 0;\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t{}\n\t\t);\n}\n\nexport function getStepInterval(length: number, cellsCount: number): number {\n\tconst interval = 1000 - (length / cellsCount) * 1000;\n\n\tif (interval < 500) {\n\t\treturn 500;\n\t}\n\n\treturn interval;\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { isItemInArray } from '../../utils';\nimport { Point } from '../../interfaces';\n\nimport s from './field.module.css';\n\nexport interface FieldProps {\n\tsize: number;\n\tsnake: Point[];\n\ttarget: Point;\n}\n\nexport function Field(props: FieldProps): JSX.Element {\n\tconst {\n\t\tsize,\n\t\tsnake,\n\t\ttarget: [x, y],\n\t} = props;\n\n\tconst rows = [];\n\n\tfor (let i = 0; i < size; i++) {\n\t\tconst cells = [];\n\n\t\tfor (let j = 0; j < size; j++) {\n\t\t\tconst isSnake = isItemInArray(snake, [j, i]);\n\t\t\tconst isTarget = x === j && y === i;\n\t\t\tconst className = classNames(\n\t\t\t\ts.cell,\n\t\t\t\tisSnake && s.snake,\n\t\t\t\tisTarget && s.target\n\t\t\t);\n\n\t\t\tcells.push(<td key={j} className={ className } />);\n\t\t}\n\n\t\trows.push(<tr key={i}>{cells}</tr>);\n\t}\n\n\treturn (\n\t\t<table className={s.field}>\n\t\t\t<tbody>{rows}</tbody>\n\t\t</table>\n\t);\n}\n","import { Point } from './interfaces';\n\nexport enum KeyCodes {\n\tSpace = 32,\n\tLeft = 37,\n\tUp,\n\tRight,\n\tDown\n}\n\nexport const offset: Record<string, Point> = {\n\t[KeyCodes.Left]: [-1, 0],\n\t[KeyCodes.Up]: [0, -1],\n\t[KeyCodes.Right]: [1, 0],\n\t[KeyCodes.Down]: [0, 1],\n};\n","import React from 'react';\n\nimport { offset, KeyCodes } from '../../constants';\nimport { Point } from '../../interfaces';\n\nimport s from './navigation.module.css';\n\nexport interface NavigationProps {\n\tstep: (point: Point) => void;\n}\n\nexport function Navigation(props: NavigationProps): JSX.Element {\n\tconst { step } = props;\n\treturn (\n\t\t<div className={s.navigation}>\n\t\t\t<button onClick={() => step(offset[KeyCodes.Up])}>up</button>\n\t\t\t<button onClick={() => step(offset[KeyCodes.Down])}>down</button>\n\t\t\t<button onClick={() => step(offset[KeyCodes.Left])}>left</button>\n\t\t\t<button onClick={() => step(offset[KeyCodes.Right])}>right</button>\n\t\t</div>\n\t);\n}\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Field } from '../../components/field';\nimport { Navigation } from '../../components/navigation';\nimport { createTarget, getStepInterval } from '../../utils';\nimport { Point, Snake } from '../../interfaces';\nimport { useKeyboard } from '../../hooks';\n\nexport interface GameProps {\n\ttimer: React.MutableRefObject<number | null>;\n\tsnake: Snake;\n\tsetSnake: (snake: Snake) => void;\n\tsize: number;\n}\n\nexport function Game(props: GameProps): JSX.Element {\n\tconst { timer, snake, setSnake, size } = props;\n\tconst [target, setTarget] = useState<Point>(createTarget(snake, size));\n\tconst [direction, setDirection] = useState<Point | null>(null);\n\tconst step = useCallback(\n\t\t(point: Point) => {\n\t\t\tconst [stepX, stepY] = point;\n\t\t\tconst [targetX, targetY] = target;\n\t\t\tconst [headX, headY] = snake[snake.length - 1];\n\t\n\t\t\tconst nextSnake = [...snake];\n\t\t\tconst nextHeadX = headX + stepX;\n\t\t\tconst nextHeadY = headY + stepY;\n\t\t\tconst hasTarget = nextHeadX === targetX && nextHeadY === targetY;\n\t\n\t\t\tnextSnake.push([nextHeadX, nextHeadY]);\n\t\n\t\t\tif (hasTarget) {\n\t\t\t\tsetTarget(createTarget(nextSnake, size));\n\t\t\t} else {\n\t\t\t\tnextSnake.shift();\n\t\t\t}\n\t\n\t\t\tsetSnake(nextSnake);\n\t\t\tsetDirection(point);\n\t\t},\n\t\t[target, snake]\n\t);\n\n\tuseKeyboard({ navigation: step });\n\n\tuseEffect(\n\t\t() => () => {\n\t\t\tif (timer.current) {\n\t\t\t\tclearInterval(timer.current);\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (direction === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (timer.current) {\n\t\t\t\tclearInterval(timer.current);\n\t\t\t}\n\t\n\t\t\ttimer.current = window.setInterval(\n\t\t\t\t() => step(direction),\n\t\t\t\tgetStepInterval(snake.length, size * size)\n\t\t\t);\n\t\t},\n\t\t[direction, snake, step]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Field snake={snake} size={size} target={target} />\n\t\t\t<Navigation step={step} />\n\t\t</>\n\t);\n}\n","import { useEffect } from 'react';\nimport { KeyCodes, offset } from './constants';\nimport { Point } from './interfaces';\n\nexport interface UseKeyboardOptions {\n\tnavigation: (direction: Point) => void;\n}\n\nexport function useKeyboard(options: UseKeyboardOptions): void {\n\tconst { navigation } = options;\n\tuseEffect(\n\t\t() => {\n\t\t\twindow.addEventListener('keydown', handleKeydown);\n\n\t\t\tfunction handleKeydown(event: KeyboardEvent): void {\n\n\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\tcase KeyCodes.Left: {\n\t\t\t\t\t\tnavigation(offset[KeyCodes.Left]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase KeyCodes.Up: {\n\t\t\t\t\t\tnavigation(offset[KeyCodes.Up]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase KeyCodes.Right: {\n\t\t\t\t\t\tnavigation(offset[KeyCodes.Right]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase KeyCodes.Down: {\n\t\t\t\t\t\tnavigation(offset[KeyCodes.Down]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn () => {\n\t\t\t\twindow.removeEventListener('keydown', handleKeydown);\n\t\t\t}\n\t\t},\n\t\t[navigation]\n\t);\n}\n","export enum SizeList {\n\tExtraSmall = 4,\n\tSmall = 8,\n\tMedium = 16,\n\tLarge = 24,\n\tExtraLarge = 36\n}\n","import React from 'react';\n\nimport s from './result.module.css';\n\nexport interface ResultProps {\n\tresult: boolean;\n}\n\nexport function Result(props: ResultProps): JSX.Element {\n\tconst { result } = props;\n\treturn <h1 className={ s.result }>{ result ? 'Win' : 'Game over' }</h1>;\n}\n","import React, { CSSProperties, useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport { SizeList } from './constants';\n\nimport s from './setup.module.css';\n\nconst sizeList = [\n\tSizeList.ExtraSmall,\n\tSizeList.Small,\n\tSizeList.Medium,\n\tSizeList.Large,\n\tSizeList.ExtraLarge\n];\nconst cellCount = sizeList.length * sizeList.length;\n\nexport interface SetupProps {\n\tsize: number;\n\tsetSize: (size: number) => void;\n\tonStart: () => void;\n}\n\nexport function Setup(props: SetupProps): JSX.Element {\n\tconst { size, setSize, onStart } = props;\n\tconst selectedIndex = useMemo(\n\t\t() => sizeList.findIndex((item) => item === size),\n\t\t[size]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<div className={ s.table } style={{ '--size': sizeList.length } as CSSProperties}>\n\t\t\t\t{Array.from({ length: cellCount }, (_, i) => {\n\t\t\t\t\tconst row = Math.floor(i / sizeList.length);\n\t\t\t\t\tconst cell = i - row * sizeList.length;\n\t\t\t\t\tconst isSelected =\n\t\t\t\t\t\tcell <= selectedIndex &&\n\t\t\t\t\t\trow <= selectedIndex;\n\t\t\t\t\tconst cellClassNames = classNames(\n\t\t\t\t\t\ts.cell,\n\t\t\t\t\t\tisSelected && s.cell_selected\n\t\t\t\t\t);\n\t\t\t\t\treturn <div key={i} className={cellClassNames} />;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<form className={ s.container } onSubmit={onStart}>\n\t\t\t\t<div className={ s.size }>\n\t\t\t\t\t{sizeList.map((value: number) => {\n\t\t\t\t\t\tconst title = getTitle(value)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={title}>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid={title}\n\t\t\t\t\t\t\t\t\tclassName={ s.radio }\n\t\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\t\tname='size'\n\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\tchecked={size === value}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label className={ s.label } htmlFor={title}>\n\t\t\t\t\t\t\t\t\t{getTitle(value)} {`(${value}x${value})`}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<button className={ s.submit }>Start</button>\n\t\t\t</form>\t\n\t\t</>\n\t);\n\n\tfunction handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\n\t\tsetSize(Number(event.target.defaultValue));\n\t}\n}\n\nfunction getTitle(value: SizeList): string {\n\tswitch (value) {\n\t\tcase SizeList.ExtraSmall:\n\t\t\treturn 'xs';\n\t\tcase SizeList.Small:\n\t\t\treturn 's';\n\t\tcase SizeList.Medium:\n\t\t\treturn 'm';\n\t\tcase SizeList.Large:\n\t\t\treturn 'l';\n\t\tcase SizeList.ExtraLarge:\n\t\t\treturn 'xl';\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n","import React, { useState, useRef, useMemo, useEffect } from 'react';\n\nimport { Game } from '../game/game';\nimport { Result } from '../result/result';\nimport { Setup } from '../setup/setup';\nimport { ensureDefined, isOutOfRange, isItemInArray } from '../../utils';\nimport { Point } from '../../interfaces';\nimport { SizeList } from '../setup/constants';\n\nimport s from './main.module.css';\n\nenum GameState {\n\tInit,\n\tStart,\n\tEnd\n}\n\nexport function Main(): JSX.Element {\n\tconst timer = useRef<number | null>(null);\n\tconst [size, setSize] = useState(SizeList.Medium);\n\tconst [state, setState] = useState(GameState.Init);\n\tconst [snake, setSnake] = useState<Point[]>([]);\n\tconst result = useMemo(\n\t\t() => {\n\t\t\tif (snake.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst snakeCopy = [...snake];\n\t\t\tconst head = snakeCopy.pop();\n\t\t\tconst [headX, headY] = ensureDefined(head);\n\t\t\tconst hasWon = snake.length === size * size;\n\n\t\t\tif (\n\t\t\t\t!hasWon && (\n\t\t\t\t\tisOutOfRange(headX, size) ||\n\t\t\t\t\tisOutOfRange(headY, size) ||\n\t\t\t\t\tisItemInArray(snakeCopy, [headX, headY])\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (hasWon) {\n\t\t\t\tif (timer.current) {\n\t\t\t\t\tclearInterval(timer.current);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\t[snake]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (result !== undefined) {\n\t\t\t\tsetState(GameState.End);\n\t\t\t}\n\t\t},\n\t\t[result]\n\t);\n\n\treturn (\n\t\t<div className={s.app}>\n\t\t\t{ render()}\n\t\t</div>\n\t);\n\n\tfunction render(): React.ReactNode {\n\t\tswitch (state) {\n\t\t\tcase GameState.Init: {\n\t\t\t\treturn (\n\t\t\t\t\t<Setup\n\t\t\t\t\t\tonStart={start}\n\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\tsetSize={setSize}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase GameState.Start: {\n\t\t\t\treturn (\n\t\t\t\t\t<Game\n\t\t\t\t\t\ttimer={timer}\n\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\tsnake={snake}\n\t\t\t\t\t\tsetSnake={setSnake}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}\n\t\t\tcase GameState.End: {\n\t\t\t\treturn <Result result={ensureDefined(result)} />\n\t\t\t}\n\t\t\tdefault: return null;\n\t\t}\n\t}\n\n\tfunction start(): void {\n\t\tconst center = size / 2;\n\t\tsetSnake([[center, center]]);\n\t\tsetState(GameState.Start);\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport { Main } from './pages/main';\n\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Main />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}